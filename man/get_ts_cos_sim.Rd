% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_ts_cos_sim.R
\name{get_ts_cos_sim}
\alias{get_ts_cos_sim}
\title{Calculate cosine similarities between target word and candidates words over
time using ALC embedding approach}
\usage{
get_ts_cos_sim(
  x,
  timevar,
  textvar,
  target,
  candidates,
  pre_trained,
  transform_matrix,
  window = 6,
  valuetype = "fixed",
  case_insensitive = TRUE,
  hard_cut = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{x}{a character vector - this is the set of documents (corpus) of interest}

\item{timevar}{name of variable in corpus defining time unit within which to calculate similarities}

\item{textvar}{name of variable in corpus from which the text comes (e.g., "tweet" in dataset of tweets)}

\item{target}{a character vector - target word}

\item{candidates}{character vector defining vocabulary to subset conmparison to}

\item{pre_trained}{a V x D matrix of numeric values - pretrained embeddings with V = size of vocabulary and D = embedding dimensions}

\item{transform_matrix}{a D x D transformation matrix}

\item{window}{integer - defines the size of a context (words around the target)}

\item{valuetype}{the type of pattern matching: "glob" for "glob"-style wildcard expressions;
"regex" for regular expressions; or "fixed" for exact matching.}

\item{case_insensitive}{logical - if TRUE, ignore case when matching the target.
See quanteda's documentation for the kwic function.}

\item{hard_cut}{logical - if TRUE then the text must have window x 2 tokens,
if FALSE it can have window x 2 or fewer (e.g. if a doc begins with a target word,
then text will have window tokens rather than window x 2)}

\item{verbose}{logical - if TRUE, report the total number of target instances found, and
report the observations that had no overlap the provided pre-trained embeddings}
}
\value{

}
\description{
Calculate cosine similarities between target word and candidates words over
time using ALC embedding approach
}
\examples{
library(conText)
library(dplyr)

# load corpus
corpus <- sample_corpus
pre_trained <- sample_glove
transform_matrix <- khodakA

# gen time var
corpus$year <- rep(2011:2014, each = 250)
cos_simsdf <- get_ts_cos_sim(x = corpus, timevar = "year", textvar = "speech", target = "equal", candidates = c("and", "the"), pre_trained = pre_trained, transform_matrix = transform_matrix)
}
